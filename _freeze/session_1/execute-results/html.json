{
  "hash": "3989d90059a43fdd5441321dcc04d2c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n - naquiz\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-title: \"In this session:\"\n---\n\n\n<!-- things to change: -->\n<!-- adjust timing -->\n\n# Session 1: Introduction to R {#sec-session01}\n\nIn this session, we will get familiar with R.\n\n::: {.callout-tip title=\"Learning Objectives\"}\nAt the end of this session, learners should be able to:\n\n1.  Use RStudio, R projects and R scripts\n\n2.  Perform basic mathematical operations, comparisons and function calls in R\n\n3.  Store the results of analysis in variables\n\n4.  Describe the different data types and data structures used in R\n\n5.  Recall how to use RStudio to find data files and read them in as data frames\n:::\n\n## Using RStudio {#sec-usingRstudio}\n\n### What is R and RStudio? {#sec-whatIsR}\n\n**R** is a free and popular statistical programming language, great for performing data analysis. **RStudio** is a free [integrated development environment (IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment) that provides useful support features for writing code. During this course, we will learn how to use RStudio's handy features like projects (which help us to keep track of different analyses) and the environment panel (which shows us all of our data/variables in one place).\n\n### Opening our project {#sec-project}\n\nProjects are a way we can organise our work in RStudio, so that we can resume where we left off and keep different analyses separate. Any time you start working on something new (like this course!) it is recommended that you start a new project. To make things easier, we have pre-made an R project with all of the data you will need for this course. If you haven't already, download it using the button below:\n\n\n{{< downloadthis data/r_course.zip dname=\"r_course\" label=\"Download the R project for this course\" icon=\"file-earmark-arrow-down\" type=\"primary\" class=\"data-button\" id=\"rproj\" >}}\n\n\n\nOnce downloaded, you can move this file to wherever you'd like on your computer, and **unzip it** (on mac: double-click, on windows: right-click, then 'extract all').\n\nInside the 'r_course' folder, you should see two things: a sub-folder called 'data' and a file called `r_course.Rproj`:\n\n![The r_course folder contains a 'data' sub-folder and an R project file](images/S01F00_rproject.png){width=\"960\"}\n\nDouble-click on this `.Rproj` (R project) file, and it should open up in RStudio. You now have a new R session, where you are working inside of a project called 'r_course'.\n\nYou can see the current project you're working on, switch between projects or create a new project using the menu in the top right hand corner of RStudio:\n\n![In the top right hand corner of RStudio, you can see all of your projects](images/S01F01_make_project.png){width=\"960\"}\n\n::: {.callout-note title=\"Name with underscores, not spaces\"}\nYou'll notice I named my project using an underscore (r_course) rather than a space (r course). **In general, when coding we want to name things without spaces**, so that it is clear to the computer that we are talking about a single entity (the 'r_course') as opposed to multiple things ('r' and 'course'). We'll revisit this idea later in the session in @sec-variables\n:::\n\n### Creating an R script {#sec-createRScript}\n\nNow that our project is set up, we need to create a file to write our code in:\n\n![How to create a new R Script](images/S01F05_new_script.png){width=\"960\"}\n\nThis file is called an **R Script**. Don't forget to save your R Script as you work so you don't lose your progress! You can do this through the file menu or by using the keyboard shortcut {{< kbd Cmd-S >}}.\n\n### Overview of the RStudio layout\n\nAt this point, your RStudio window should look like this, with four different panels visible:\n\n![The four panels of RStudio](images/S01F06_panels.png){width=\"960\"}\n\nThis is what they're used for:\n\n1.  **The R Script panel.** This is a text document where you can write code, and run it by highlighting the code or putting your cursor on that line, then pressing the 'run' button in the top-right corner or using the {{< kbd Cmd-Enter >}} keyboard shortcut.\n\n2.  **The console.** This is where the output (results) of your code will appear. You can also run code in the console, by typing it next to the `>` symbol and pressing {{< kbd Enter >}} but it's better to use the R Script, as the code you write there is saved and acts as a record of your work.\n\n3.  **The environment panel.** This is where the data and variables you use in your analysis will be listed. More on this later.\n\n4.  **The files/plot/help panel.**\n\n    -   Under the 'files' tab you can see the files in your current folder\n\n    -   Under the 'plots' tab you can view the plots you have created\n\n    -   Under the 'help' tab you can read manual pages to learn how to use functions\n\nAlthough there are other tabs for some of these panels, they are used for more niche things out of scope of this course. You can read more about it in the [RStudio documentation](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html).\n\n### Writing our first piece of code\n\nNow we are ready to write our bit of code! We'll start with one of the most important concepts in programming: comments. Comments are lines of our script that begin with `#` and they are ignored by the computer: they are just notes that we write to ourselves. It's really important to write 'well-commented' code, with plenty of comments that clearly explain what your code is doing, so that your script can easily be understood by whoever looks at it next (whether this is someone else or you revisiting an analysis many months later!)\n\n::: {.callout-warning title=\"Don't forget your #\"}\nIf you forget the `#` at the start of your comment, R will try to interpret your notes as actual code, and you'll get an error message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noops I forgot the hashtag\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:1:6: unexpected symbol\n1: oops I\n         ^\n```\n\n\n:::\n:::\n\n:::\n\nDuring this course, we will practice writing well-commented code, but here is an example of how we could write comments to explain the code for one plus one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate one plus one\n1 + 1 # the + symbol means plus\n```\n:::\n\n\nNote that comments can be written on their own line or at the end of a line after the code. Crucially, you cannot write any code after a `#` on the same line, as R will ignore it. This is sometimes useful for 'commenting out' code that you don't want to run, but want to keep in your script for later use.\n\n## Practicing R code with maths {#sec-maths}\n\nTo practice running R code, let's do some maths. Here's how to code some basic mathematical operations in R:\n\n+----------------+------------+------------------------------------------------------------------+\n| Operation      | Code       | Example                                                          |\n+================+============+==================================================================+\n| Addition       | `+`        | one plus one: `1 + 1`                                            |\n+----------------+------------+------------------------------------------------------------------+\n| Subtraction    | `-`        | two minus ten: `2 - 10`                                          |\n+----------------+------------+------------------------------------------------------------------+\n| Multiplication | `*`        | eight times 4: `8 * 4`                                           |\n+----------------+------------+------------------------------------------------------------------+\n| Division       | `/`        | ten divided by 3: `10 / 3`                                       |\n+----------------+------------+------------------------------------------------------------------+\n| Exponents      | `^`        | three squared: `3 ^ 2`                                           |\n+----------------+------------+------------------------------------------------------------------+\n| Brackets       | `()`       | sixteen divided by the result of three minus one: `16 / (3 - 1)` |\n+----------------+------------+------------------------------------------------------------------+\n\nLike in regular maths, R follows the order of operations. Here, the `3 + 2` in the brackets will be evaluated first, and then result will be multiplied by 7.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# brackets evaluate first\n(3 + 2) * 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\nYou might notice when running this code that before the output (result), there is a number one that looks like this: `[1]`. This relates to the length of our output, which here is just one single number (hence the `1`). Later in the session we will write code with longer output, and the purpose of this number will become clearer, but you can ignore it for now.\n\n::: {.callout-note title=\"Using whitespace in code\"}\nAbove we used spaces between the numbers and mathematical operators in our code. R understands code without spaces too, but this makes it easier to read. Note that this is different to when we are naming things, when spaces are bad!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# spaces don't matter in code\n3 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n# so both of these should give the same result\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. Which R expression would give me a result of 10?\n\n::: choices\n::: {.choice .correct-choice}\n`(2 * 3) + (2 ^ 2)`\n:::\n\n::: choice\n`(5 - 3) * 4`\n:::\n\n::: choice\n`1 + 1`\n:::\n\n::: choice\n`20 - 1`\n:::\n:::\n:::\n\n::: question\n2\\. What would be the result of running this line of R code: `# test 1+1`\n\n::: choices\n::: choice\n1\n:::\n\n::: choice\n2\n:::\n\n::: choice\nAn error\n:::\n\n::: {.choice .correct-choice}\nNothing\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n<p>\n\n1.  `(2 * 3) + (2 ^ 2)` is equal to 10. If you're not sure, try copy-pasting this code into the console and running it! The best way to learn is by doing.\n\n2.  The code `# test 1+1` is a comment, because it starts with a `#`. This means R ignores it: if you run this code, you won't see any output in the console.\n\n</p>\n\n</details>\n:::\n\n## Comparisons {#sec-comparisons}\n\nR can perform comparisons, using the following notation:\n\n| Comparison                    | Code         |\n|-------------------------------|--------------|\n| Equal to                      | `==`         |\n| Not equal to                  | `!=`         |\n| Greater/less than             | `>` or `<`   |\n| Greater/less than or equal to | `>=` or `<=` |\n\n::: {.callout-warning title=\"Mind your equal signs!\"}\nBe careful to use double equal signs `==` when checking for equality. If you use only one, you'll get an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1 # this is TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n1 = 1 # this gives an error\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in 1 = 1: invalid (do_set) left-hand side to assignment\n```\n\n\n:::\n:::\n\n:::\n\nComparisons in R return either `TRUE` or `FALSE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n10 >= 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nYou can also negate the result of a comparison or any TRUE/FALSE value by using the `!` operator before the expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gives FALSE (i.e. not TRUE)\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# gives TRUE: 1 is not equal to 2, but we've negated the result\n!(1 == 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nThis is really useful for filtering data, which we will cover in [Session @sec-session02]\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. What would be the result of running this R code: `10 >= 10`\n\n::: choices\n::: choice\n10\n:::\n\n::: choice\n`FALSE`\n:::\n\n::: {.choice .correct-choice}\n`TRUE`\n:::\n\n::: choice\nAn error\n:::\n:::\n:::\n\n::: question\n2\\. Which of the following R expressions would give me a result of `FALSE`?\n\n::: choices\n::: choice\n`1 == 1`\n:::\n\n::: choice\n`1 != (3 - 4) * 1`\n:::\n\n::: choice\n`1 = 10`\n:::\n\n::: {.choice .correct-choice}\n`1 == 2`\n:::\n:::\n:::\n\n::: question\n3\\. What would be the result of running this R code: `!TRUE`\n\n::: choices\n::: {.choice .correct-choice}\n`FALSE`\n:::\n\n::: choice\n`TRUE`\n:::\n\n::: choice\nAn error\n:::\n\n::: choice\nNothing\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n<p>\n\n1.  `10 >= 10` is TRUE because 10 is equal to 10, and we are using the greater than or equal to operator, `>=`.\n2.  `1 == 2` is the only expression that would give a result of `FALSE`. Be mindful that `1 = 10` is not a valid expression in R, and would give an error (since we need to use the double equal sign `==` for comparisons).\n3.  `!TRUE` is `FALSE` because we are negating the value using `!`.\n\n</p>\n\n</details>\n:::\n\n## Variables {#sec-variables}\n\n### What's a variable?\n\nA variable (also known as an object) in R is like a label we can use to keep track of values. We assign (save) values to variables so that we can refer to them later.\n\nFor example, let's say I use R to do some maths:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(2 + 6) * 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n:::\n\n\nR outputs simply the result. To use this value later, I would need to assign the output to a variable.\n\nVariables are assigned with the assignment operator `<-` (you can type this using the {{< kbd < >}} and {{< kbd - >}} keys, or use the shortcut {{< kbd alt- >}}).\n\n::: {.callout-note title=\"Assignment arrows\"}\nYou might be familiar with assigning values to variables using the equal sign `=`, which is used in other programming languages and in maths. Although this does also work in R, **it's preferred to use the arrow** `<-` as this makes it really clear that a variable is being assigned. In this course we'll be using `<-`.\n:::\n\nReturning to our example, let's save the result of the above calculation to a variable called `my_number`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign the result to my_number\nmy_number <- (2 + 6) * 7\n```\n:::\n\n\nHere, R has performed the calculation to the right of the arrow (`(2 + 6) * 7`) and assigned the result of this to the `my_number` variable.\n\nYou'll notice that this line of code doesn't produce any output, because it has gone straight into our variable. If we want to know the value of `my_number`, we can either run it as a line of R code, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n:::\n\n\nOr, we can look at the environment panel in RStudio:\n\n![We can see our variables and their values in the environment panel](images/S01F07_environment_panel.png)\n\n### Using variables in R code\n\nVariables can be used in place of values (e.g. numbers) in R code. For example, we can use the `my_number` variable in a calculation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiply my_number by 2\nmy_number * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 112\n```\n\n\n:::\n:::\n\n\nAs the name suggests, variables can vary! We can assign a new value to a variable at any time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change the value of my_number to 12\nmy_number <- 12\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\nBecause the right hand side of the arrow is evaluated first, you can also assign to a variable a calculation that involves itself:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add 5 to my_number\nmy_number <- my_number + 5\nmy_number # value is now 17 since 12 + 5 = 17\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\n::: {.callout-warning title=\"Careful of cases!\"}\nOne thing we need to be careful of when using variables is that R is case-sensitive. This means that `MY_NUMBER` is not the same as `my_number`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create the my_number variable\nmy_number <- (2 + 6) * 7\n\n# produces error because MY_NUMBER is not the same as my_number\nMY_NUMBER\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'MY_NUMBER' not found\n```\n\n\n:::\n:::\n\n:::\n\nThere's not really any harm in keeping variables around, but if you would like to remove them you can use the `rm()` function like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign a variable\nmy_variable <- 10\n\n# remove it\nrm(my_variable) # put the variable name inside the brackets\n```\n:::\n\n\nWe'll cover functions in more detail in @sec-functions.\n\nIf you want to remove ALL the variables you've assigned and start fresh, you can use the broom button in the environment panel:\n\n![The broom button removes all your variables](images/S01F09_broom_button.png){width=\"686\"}\n\nTry using the broom to clean up your environment after completing the practice exercises at the end of this section.\n\n### Choosing good variable names\n\nWhen naming variables, we need to follow these rules:\n\n+----------------------------------------------------------------------+----------------------------------------+\n| Rule                                                                 | Examples                               |\n+======================================================================+========================================+\n| **Variable names can only contain letters, numbers and underscores** | ✅ Allowed: `my_number`, `ID_2`        |\n|                                                                      |                                        |\n|                                                                      | ❌ Not allowed: `my_number!`, `price$` |\n+----------------------------------------------------------------------+----------------------------------------+\n| **Variable names can't start with a number**                         | ✅ Allowed: `my_number_2`              |\n|                                                                      |                                        |\n|                                                                      | ❌ Not allowed: `2_my_number`          |\n+----------------------------------------------------------------------+----------------------------------------+\n| **Variable names can't contain spaces**                              | ✅ Allowed: `my_number`                |\n|                                                                      |                                        |\n|                                                                      | ❌ Not allowed: `my number`            |\n+----------------------------------------------------------------------+----------------------------------------+\n\nIf we try to create a variable that breaks these rules, R will give an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gives an error because we use a non-allowed character\npercentage% <- 100\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:11: unexpected input\n1: # gives an error because we use a non-allowed character\n2: percentage% <- 100\n             ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# gives an error because we start with a number\n1place <- 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:2: unexpected symbol\n1: # gives an error because we start with a number\n2: 1place\n    ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# gives an error because we have a space\nmy age <- 5\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:4: unexpected symbol\n1: # gives an error because we have a space\n2: my age\n      ^\n```\n\n\n:::\n:::\n\n\nRStudio will try to help you spot these mistakes in your script, by using underlining them in red:\n\n![RStudio underlines errors in your code](images/S01F08_variable_errors.png)\n\nBeyond those three key rules, there are also some best practices we should try to keep in mind when naming our variables:\n\n-   Try not to use capital letters. Since R is case sensitive, `Genes` is a different variable to `genes`. It can be easy to forget to use a capital letter, so it's generally better to avoid them if you can.\n\n-   Use descriptive names. It's better to use a longer name that describes what the variable is for, rather than a short name that doesn't give much information. For example, `gene_counts` is better than `gc`. You'll thank yourself later when you come back to your code and can't remember what `gc` stands for!\n\n-   Avoid using names that are already used in R. For example, `mean` is a function in R that calculates the average of a set of numbers. If you use `mean` as a variable name, this could lead to errors: how will R know if you are referring to the function `mean` or your variable `mean`?\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. How would I assign the value of 10 to a variable called `my_variable`?\n\n::: choices\n::: choice\n`10`\n:::\n\n::: {.choice .correct-choice}\n`my_variable <- 10`\n:::\n\n::: choice\n`my_variable = 10`\n:::\n\n::: choice\n`my variable <- 10`\n:::\n:::\n:::\n\n::: question\n2\\. I have assigned the value of 10 to a variable called `my_variable` as in Q1. What then would be the output from running this line of R code: `my_variable + 5`?\n\n::: choices\n::: choice\nAn error\n:::\n\n::: choice\nNothing\n:::\n\n::: choice\n5\n:::\n\n::: {.choice .correct-choice}\n15\n:::\n:::\n:::\n\n::: question\n3\\. I have assigned the value of 10 to a variable called `my_variable` as in Q1. If I run the code `my_variable <- my_variable + 10`, what is the new value of `my_variable`?\n\n::: choices\n::: choice\n10\n:::\n\n::: choice\n25\n:::\n\n::: {.choice .correct-choice}\n20\n:::\n\n::: choice\n`my_variable`\n:::\n:::\n:::\n\n::: question\n4\\. Which of the following is a valid variable name?\n\n::: choices\n::: choice\n`10th_place`\n:::\n\n::: choice\n`(n)_mice`\n:::\n\n::: choice\n`disease status`\n:::\n\n::: {.choice .correct-choice}\n`expression_level`\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n<p>\n\n1.  `my_variable <- 10` is the correct way to assign the value of 10 to a variable called `my_variable`. Remember the arrow `<-` is used for assignment in R.\n2.  The output would be 15, since `my_variable` is 10 and we are adding 5 to it.\n3.  The new value of `my_variable` would be 20, since we are adding 10 to the current value of `my_variable` (which is 10). Note that even though we added 5 to `my_variable` earlier, this value is not saved anywhere (since we didn't assign it), so we are starting from the original value of 10.\n4.  `expression_level` is the only valid variable name. `10th_place` starts with a number, `(n)_mice` contains brackets, and `disease status` contains a space.\n\n</p>\n\n</details>\n:::\n\n## Functions {#sec-functions}\n\n### Functions and arguments\n\nFunctions are programs that take inputs (also known as arguments) and produce outputs. They have a name, followed by round brackets `()` which contain the arguments.\n\nFor example, when we used the code `rm(my_variable)` earlier, the function `rm()` was taking the input (argument) `my_variable` and producing the output of deleting that variable.\n\nSome functions have multiple arguments, which are specified by separating them with commas. Arguments have a set order in which they can be given, or they can be referred to specifically by their name (using a equal sign `=` to provide a value).\n\nAs an example, the `round()` function rounds a number to a specified number of decimal places. The first argument is the number to be rounded, and the second argument is the number of decimal places to round to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we'll use this decimal to demonstrate the round function\ndecimal <- 3.14159\n\n# round to 3 decimal places\nround(decimal, digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.142\n```\n\n\n:::\n\n```{.r .cell-code}\n# we don't have to specify the argument name if we provide the arguments in the correct order\nround(decimal, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.142\n```\n\n\n:::\n:::\n\n\nWe can see that both of our calls to the `round()` function produced the same result, but the first is easier to understand since we explicitly specified the argument.\n\nMany arguments have default values so you don't need to specify every argument for every function. For example, the `round()` function has a default value of 0 for the `digits` argument, so if you don't specify it, the number will be rounded to the nearest whole number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(decimal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n::: {.callout-warning title=\"Common errors with functions\"}\nHere are some common errors you might encounter when using functions. Have a look at the code below and read the error messages to see how the two relate. This will help you to fix typos/errors in your own code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# forgot to enclose the arguments in brackets\nround 3.14159\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:7: unexpected numeric constant\n1: # forgot to enclose the arguments in brackets\n2: round 3.14159\n         ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# forgot the comma between the arguments\nround(3.14159 digits = 3)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:15: unexpected symbol\n1: # forgot the comma between the arguments\n2: round(3.14159 digits\n                 ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# spelt the argument name wrong\nround(3.14159, digts = 3)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in round(3.14159, digts = 3): unused argument (digts = 3)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# forgot to close the brackets\nround(3.14159, digits = 3\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:3:0: unexpected end of input\n1: # forgot to close the brackets\n2: round(3.14159, digits = 3\n  ^\n```\n\n\n:::\n:::\n\n\nRStudio will also flag some of these sorts of issues in the script panel, although it won't catch everything:\n\n![RStudio can help you to find errors in your function calls before you run the code](images/S01F15_errors_in_functions.png){width=\"900\"}\n:::\n\n### Getting help with functions: within R\n\nWhen you're using a function, you might not know what arguments it takes, what they do or what their default values are. Nobody can remember all of this information, so one of the most important skills in programming is learning how to access help.\n\nYou can access the help pages for a function by typing `?` followed by the name of the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?round\n```\n:::\n\n\nOr searching for the function in the help tab in RStudio:\n\n![You can search for functions directly in the help panel](images/S01F10_help_search.png){width=\"688\"}\n\nHere's what the help page looks like for the `round` function:\n\n![The help page for the round function](images/S01F11_help_page.png){width=\"688\"}\n\nHelp pages can sometimes be quite technical or complicated– for example the help page for `round` also describes various other similar functions for rounding numbers. Often the most important section to look at is the 'arguments' one:\n\n![Help pages have a section for describing arguments](images/S01F12_help_arguments.png){width=\"638\"}\n\nYou can also see help for functions in the script panel, as you are typing your code:\n\n![RStudio will show you a preview of the help page as you type a function name](images/S01F13_help_when_typing.png){width=\"1438\"}\n\nIt will also suggest you the names of arguments:\n\n![RStudio also suggests arguments for functions as you type](images/S01F14_help_when_typing_2.png){width=\"1682\"}\n\nSo, if you get stuck with how to use a function, wait a moment and see if RStudio will suggest what you need.\n\n### Getting help with functions: beyond R\n\nSometimes, the R help pages can be pretty tricky to understand, and they can't help you if you don't know the name of the function you need! In this course, we'll learn about lots of different functions, but even R experts need to look things up sometimes. Here are some good resources for getting help:\n\n-   **Google**. R is a pretty popular language, so if you google 'how to do x in R', you'll probably find an answer\n\n-   **Package vignettes**. Many R packages have vignettes, which are short guides to using the package. Once you find the name of a package you might want to use, you should go through their vignettes to see what functions are available and how to use them.\n\n-   **ChatGPT** (or similar). AI tools can be really useful in helping you write code, although make sure you double-check the results because it can make mistakes. Tips and advice on how to effectively use AI tools is available in the \"Further reading\" section.\n\n-   **Ask others**! There are lots of R users, and working together is often the best way to solve problems. This could be through online forums, like [StackOverflow](http://stackoverflow.com/questions/tagged/r) or in-person\n\nNo matter where you get your help, try to make sure you understand the code you find. Reading the help pages for new functions, or asking an AI like ChatGPT to explain what code is doing is a great way to expand your R knowledge. We also list some recommended additional resources in the \"Useful references\" section of \"Further reading\".\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. What would be the result of running this R code: `round(3.14159, digits = 2)`\n\n::: choices\n::: choice\n3.14159\n:::\n\n::: choice\n3.141\n:::\n\n::: {.choice .correct-choice}\n3.14\n:::\n\n::: choice\n3\n:::\n:::\n:::\n\n2\\. Look up the help pages for the following functions, and describe what they do:\n\n-   `mean()`\n-   `Sys.Date()`\n-   `sin()`\n\n::: question\n3\\. What is wrong with this line of R code: `round(3.14159, digits = 3`\n\n::: choices\n::: choice\nDigits is not a valid argument for the round function\n:::\n\n::: choice\nYou need to use a double equal sign `==` for the digits argument\n:::\n\n::: choice\nYou don't need to specify the digits argument\n:::\n\n::: {.choice .correct-choice}\nYou need to close the brackets at the end of the line\n:::\n:::\n:::\n\n::: question\n4\\. Which of the following lines of R code will run without error?\n\n::: choices\n::: choice\n`rm(my_variable`\n:::\n\n::: choice\n`round(3.14159, Digits = 3)`\n:::\n\n::: choice\n`round(3.14159 digits = 3)`\n:::\n\n::: {.choice .correct-choice}\n`round(3.14159, 3)`\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n<p>\n\n1.  The result of running `round(3.14159, digits = 2)` would be 3.14. Remember the `round()` function rounds the number 3.14159 to 2 decimal places, according to the digits argument.\n2.  The `mean()` function calculates the average of a set of numbers, `Sys.Date()` returns the current date, and `sin()` calculates the sine of an angle (in radians).\n3.  The line of R code `round(3.14159, digits = 3` is missing a closing bracket at the end, which is why it would produce an error.\n4.  The line of R code `round(3.14159, 3)` will run without error. The other lines of code have errors: `rm(my_variable` is missing a closing bracket, `round(3.14159, Digits = 3)` has a typo in the argument name (argument names are case sensitive), and `round(3.14159 digits = 3)` is missing a comma between the arguments. Remember that we don't always need to specify the argument names if we provide the arguments in the correct order, which is why we could omit the `digits =` part in the correct line of code.\n\n</p>\n\n</details>\n:::\n\n## Data types {#sec-dataTypes}\n\nEvery variable in R has a 'type'. The type tells R what kind of data it is and consequently what it can and can't do with the data. For example, it makes sense to perform mathematical functions like multiplication or division on numbers but not on words.\n\nThere are three basic types of data in R:\n\n+-------------+---------------------------------------------------------------------------------------------------+-------------------+\n| Type        | Description                                                                                       | Examples          |\n+=============+===================================================================================================+===================+\n| `logical`   | also known as 'boolean', true or false                                                            | `TRUE`            |\n|             |                                                                                                   |                   |\n|             |                                                                                                   | `FALSE`           |\n+-------------+---------------------------------------------------------------------------------------------------+-------------------+\n| `numeric`   | numbers                                                                                           | `1`               |\n|             |                                                                                                   |                   |\n|             |                                                                                                   | `0.523`           |\n|             |                                                                                                   |                   |\n|             |                                                                                                   | `10000`           |\n+-------------+---------------------------------------------------------------------------------------------------+-------------------+\n| `character` | text/numbers surrounded by quotation marks (double `\"\"` or single `''`). Also known as a 'string' | `'hello'`         |\n|             |                                                                                                   |                   |\n|             |                                                                                                   | `\"cat\"`           |\n|             |                                                                                                   |                   |\n|             |                                                                                                   | `\"my name is...\"` |\n+-------------+---------------------------------------------------------------------------------------------------+-------------------+\n\nThese are called 'atomic' data types as they are the most basic types of data from which other data types derive.\n\nYou can find the type of something using the `class()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# whatever you put in quotation marks is always a character\nclass(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(\"TRUE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(\"123\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\nIt is important to know the type of your data because, as mentioned earlier, R will not let you perform certain operations on data of the wrong type. For example, you can't add two characters together:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this works\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# but this gives an error\n\"1\" + \"1\"\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"1\" + \"1\": non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\nNor can you use the logical operator `!` on a character:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this works\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# but this gives an error\n!\"TRUE\"\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in !\"TRUE\": invalid argument type\n```\n\n\n:::\n:::\n\n\nYou'll notice that the error messages for these two examples explain that R can't perform the operation you're asking it to do on that data type.\n\nIf you want to change the type of a piece of data, you can use the `as.x()` functions like (e.g.`as.logical()`, `as.numeric()`, and `as.character()`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert a number to a character\nas.character(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"100\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# convert a character to a number\nas.numeric(\"100\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n\nOf course, it doesn't make sense to make some conversions. In the example below, we can't convert the word \"hello\" to a number, so we get an `NA`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if a conversion is not possible, you'll get an NA\nas.numeric(\"hello\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. What are the three atomic data types in R?\n\n::: choices\n::: {.choice .correct-choice}\nlogical, numeric, character\n:::\n\n::: choice\ninteger, float, string\n:::\n\n::: choice\ndataset, vector, matrix\n:::\n\n::: choice\nboolean, text, number\n:::\n:::\n:::\n\n::: question\n2\\. How do you find the type of a piece of data in R?\n\n::: choices\n::: choice\nYou can't\n:::\n\n::: choice\nUsing the `type()` function\n:::\n\n::: choice\nGuess\n:::\n\n::: {.choice .correct-choice}\nUsing the `class()` function\n:::\n:::\n:::\n\n::: question\n3\\. How would you convert the character \"TRUE\" to a logical?\n\n::: choices\n::: choice\n`TRUE`\n:::\n\n::: {.choice .correct-choice}\n`as.logical(\"TRUE\")`\n:::\n\n::: choice\nYou can't convert a character to a logical\n:::\n\n::: choice\nUsing the `logical()` function\n:::\n:::\n:::\n\n4\\. What are the types of the following?\n\n-   `11`\n\n-   `\"eleven\"`\n\n-   `TRUE`\n\n-   `!FALSE`\n\n-   `0.49826`\n\n-   `\"-0.53\"`\n\n-   `as.numeric(\"11\")`\n\n<details>\n\n<summary>Solutions</summary>\n\n<p>\n\n1.  The three atomic data types in R are logical, numeric, and character.\n2.  You can find the type of a piece of data in R using the `class()` function.\n3.  To convert the character \"TRUE\" to a logical, you would use `as.logical(\"TRUE\")` (we always use 'as...' functions to convert between types).\n4.  The types are:\n    -   `11` is numeric\n    -   `\"eleven\"` is character\n    -   `TRUE` is logical\n    -   `!FALSE` is logical\n    -   `0.49826` is numeric\n    -   `\"-0.53\"` is character (even though it looks like a number, it is surrounded by quotation marks so it is a character)\n    -   `as.numeric(\"11\")` is numeric (since we converted the character \"11\" to a number with the `as.numeric()` function)\n\n</p>\n\n</details>\n\n:::\n\n## Data structures {#sec-datastructures}\n\nBeyond the atomic data types, R has more complex data structures that can store multiple values. These are the building blocks of data analysis in R. The most common data structures are vectors, matrices, and data frames.\n\nThis figure summarises their key differences:\n\n![Overview of the three main data structures in R. 📷 credit: https://bookdown.org/introrbook/intro2r/](images/data-structure.png)\n\n### Vectors {#sec-vectors}\n\nA vector is a collection of values **of the same atomic type**. Values in a vector are laid out linearly, one after another.\n\nYou can create vectors with the `c()` function, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a vector of numbers\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# a vector of characters\nc(\"a\", \"vector\", \"of\", \"characters\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"          \"vector\"     \"of\"         \"characters\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# a vector of logicals\nc(TRUE, FALSE, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\nFun fact: the 'c' in `c()` stands for 'combine'.\n\nThere are a few ways to see the contents of a vector. You can simply type the name of the vector into the console, which will print out the whole thing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# in these examples we will use the letters vector that is\n# pre-loaded in R. It contains the alphabet in lowercase\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n:::\n\n\nYou'll notice that, in addition to the `[1]` that we usually see printed next to the output, there is also a `[20]`. This number is telling us where we are up to in the vector (so `[1]` means that line of output starts with the first element, `\"a\"` and `[20]` means that line of output starts with the 20th element of the vector, `\"t\"`).\n\nBut what if we don't always want to print the whole thing? For long vectors, it's handy to use the `head()` and `tail()` functions to inspect just a few values. By default, these print the first and last 6 elements of a vector (you can change that by setting the `n` argument).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use head() and tail() to take a quick look\nhead(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n:::\n\n\nYou can also use functions to look at other features of a vector, like its type (using the `class()` function just as for single values) or its length (using the `length()` function):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the class of a vector\nclass(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the length of a vector\nlength(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26\n```\n\n\n:::\n:::\n\n\nJust like you can with single values, vectors can be assigned to variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npet_names <- c(\"sprinkle\", \"lucky\", \"coco\")\n```\n:::\n\n\nThese variables will show up in the 'Environment' tab in RStudio:\n\n![The environment panel shows vectors too](images/S01F16_environment_panel_vectors.png){width=\"800\"}\n\nYou'll notice vector variables are displayed a little differently to those with single values. The type (`chr`, for character) is displayed first, followed by `[1:3]` which tells you that the `pet_names` vector has elements from 1 to 3 (in other words, it has a length of 3). This is particularly helpful when part of the vector is cut off, like in this picture!\n\n::: {.callout-note title=\"Colon (:) notation for vectors\"}\nIn programming, the colon `:` is typically used to create sequences of numbers. You can use it to create a sequence of numbers from a starting point to an ending point.\n\nFor example, `1:5` creates a vector of numbers from 1 to 5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n:::\n\nR is a vectorised language, which means that many functions and operations (like `*`, `+` etc) work directly on vectors without you having to write extra code. For example, we can use the `mean()` function to calculate the average of a vector of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector of numbers\nnumbers <- c(1, 2, 3, 4, 5)\n\n# calculate the mean\nmean(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nBecause the other data structures we'll cover are built on vectors, this concept will be useful for them as well.\n\n### Matrices {#sec-matrices}\n\nA matrix is the two-dimensional extension of the vector-- it stores a collection of values **of the same type** that are laid out in a grid with rows and columns. An example of this is a gene count matrices where each row represents a gene, each column represents a sample and therefore each cell represents the count for a particular gene in a particular sample.\n\nYou can create a matrix using the `matrix()` function. The first argument is the vector of values to be put into the matrix, and the `nrow` and `ncol` arguments specify the number of rows and columns in the matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a 2x2 matrix and assign it to gene_counts\ngene_counts <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)\n\n# print the matrix\ngene_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n:::\n\n\nUsually though you would read in a matrix from a file (e.g. the gene count matrix from a sequencing experiment).\n\nMatrices are their own type of object in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(gene_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\nAnd they show up in the environment panel in RStudio under 'Data': ![Matrices show up in the environmen panel](images/S01F17_enrivonrment_panel_matrix.png){width=\"800\"}\n\nThe rows and columns are usually labelled with names, although these names are considered metadata rather than being a part of the matrix. You can set them by assigning vectors of names to the `rownames()` and `colnames()` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set row and column names\nrownames(gene_counts) <- c(\"gene1\", \"gene2\")\ncolnames(gene_counts) <- c(\"sample1\", \"sample2\")\n\n# print the matrix, now with names!\ngene_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      sample1 sample2\ngene1       1       3\ngene2       2       4\n```\n\n\n:::\n:::\n\n\n### Data frames {#sec-dataframes}\n\nData frames are similar to matrices in that they store data in rows and columns. The difference is each column can have a different type: for example you could have a column of gene names (character), a column of gene counts (numeric) and another column telling you whether or not the gene is protein-coding (logical). For this reason, data frames are the most common data structure used in R.\n\nYou can create a data frame using the `data.frame()` function. The arguments are vectors of values to be put into the data frame, with the names of the vectors becoming the column names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data frame\nmouse_facts <- data.frame(\n  name = c(\"mickey\", \"minnie\", \"stuart\"),\n  age = c(12, 8, 16),\n  weight = c(39.7, 42.2, 46.3)\n)\n\n# print the data frame\nmouse_facts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name age weight\n1 mickey  12   39.7\n2 minnie   8   42.2\n3 stuart  16   46.3\n```\n\n\n:::\n:::\n\n\nWhen creating a data frame, it's important that all vectors are the same length. If they're not, you'll get an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmouse_facts <- data.frame(\n  name = c(\"mickey\", \"minnie\", \"stuart\"),\n  age = c(12, 8), # forgot to add stuart's age!\n  weight = c(39.7, 42.2, 46.3)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in data.frame(name = c(\"mickey\", \"minnie\", \"stuart\"), age = c(12, : arguments imply differing number of rows: 3, 2\n```\n\n\n:::\n:::\n\n\nFor the rest of this section, we'll use the `iris` data set that comes pre-loaded in R. This is a bigger data set that contains measurements of different species of iris flowers, and will help us to learn how to work with data frames in R.\n\nFirst, let's load in the dataset using the `data()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n\n`iris` has the class `data.frame`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\nJust like for vectors, there are functions to look at the contents of a data frame. This is useful as printing the whole data frame can be overwhelming if it's large (try printing `iris` and see for yourself!). The `head()` and `tail()` functions work the same way as for vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n\n\n:::\n:::\n\n\nYou can also use the `View()` function to open the data frame in a new tab in RStudio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# don't forget the capital V!\nView(iris)\n```\n:::\n\n\nThis will open a new tab in RStudio with the data frame displayed in a spreadsheet-like format, where you can sort and filter the columns to get a better view of the data:\n\n![The View() function opens the data frame in a new tab in RStudio](images/S01F18_view_function.png){width=\"800\"}\n\nAnother way to view the data frame is by clicking on its name in the environment panel:\n\n![Clicking on the data frame's name in the environment panel opens it in the viewer](images/S01F19_env_panel_data_frame.png){width=\"800\"}\n\nThis panel also shows you the names and types of the columns in the data frame. You might notice that the `Species` is described as a factor, which is a special type of data in R that we'll cover in @sec-session03.\n\nBefore the column names, you'll see the `$` symbol. The dollar sign `$` is a shortcut used in R to access columns of a data frame. For example, to access the `Petal.Width` column of the `iris` data frame, you can use `iris$Petal.Width`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Petal.Width\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3\n [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2\n [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3\n [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3\n [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3\n [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8\n[109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8\n[127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3\n[145] 2.5 2.3 1.9 2.0 2.3 1.8\n```\n\n\n:::\n:::\n\n\nTry typing this code into your R script. You'll notice once you write `iris$`, RStudio will list out all of the columns like so:\n\n![RStudio will suggest column names as you type](images/S01F20_column_suggestions.png){width=\"800\"}\n\nYou can navigate through these suggestions using the up and down arrow keys, and press {{< kbd Enter >}} or {{< kbd Tab >}} to select the column you want.\n\nThese columns are vectors, so you can use the functions we've learned about so far to work with them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the class of the Petal.Width column\nclass(iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the average Petal.Width column\nmean(iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.199333\n```\n\n\n:::\n:::\n\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. Which of the following is NOT a valid vector in R?\n\n::: choices\n::: choice\n`c(TRUE, FALSE, FALSE)`\n:::\n\n::: {.choice .correct-choice}\n`(1, 2, 3, 4)`\n:::\n\n::: choice\n`1:10`\n:::\n\n::: choice\n`c(\"cat\", \"dog\", \"fish\")`\n:::\n:::\n:::\n\n::: question\n2\\. What is the result of running this R code: `c(1, 2, 3) * 2`?\n\n::: choices\n::: choice\n`2(1, 2, 3)`\n:::\n\n::: choice\n`c(1, 2, 3, 1, 2, 3)`\n:::\n\n::: choice\n`c(1, 2, 3, 2)`\n:::\n\n::: {.choice .correct-choice}\n`c(2, 4, 6)`\n:::\n:::\n:::\n\n::: question\n3\\. What is the difference between a matrix and a data frame?\n\n::: choices\n::: {.choice .correct-choice}\nA matrix has all elements of the same type, while a data frame can have different types in each column\n:::\n\n::: choice\nThey're the same thing\n:::\n\n::: choice\nA matrix can only contain numbers, while a data frame can contain numbers and text\n:::\n\n::: choice\nA matrix is used for mathematical operations, while a data frame is used for data analysis\n:::\n:::\n:::\n\n::: question\n4\\. I wrote this code to create a data frame, but it gave me an error. What is wrong with it?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfavourite_fruits <- data.frame(\n  fruit = c(\"apple\", \"banana\", \"cherry\"),\n  colour = c(\"red\", \"yellow\", \"red\"),\n  price = c(0.5, 0.3)\n)\n```\n:::\n\n\n::: choices\n::: choice\nThe column names are not in quotation marks\n:::\n\n::: {.choice .correct-choice}\nThe columns are not the same length: 'fruit' and 'colour' have 3 elements, but 'price' has 2\n:::\n\n::: choice\nIt's not allowed to have character columns and numeric columns in the same data frame\n:::\n\n::: choice\nYou should use the `tibble()` function instead of `data.frame()`\n:::\n:::\n:::\n\n::: question\n5\\. What is NOT a way that I could view the contents of a data frame in R?\n\n::: choices\n::: choice\nRunning the name of the data frame as code in the R script panel\n:::\n\n::: choice\nTyping the name of the data frame into the console\n:::\n\n::: choice\nClicking on its name in the environment panel\n:::\n\n::: {.choice .correct-choice}\nUsing the `view()` function\n:::\n:::\n:::\n\n::: question\n6\\. I have created the `mouse_facts` data frame using the code below. How would I calculate the average age of the mice?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmouse_facts <- data.frame(\n  name = c(\"mickey\", \"minnie\", \"stuart\"),\n  age = c(12, 8, 16),\n  weight = c(39.7, 42.2, 46.3)\n)\n```\n:::\n\n\n::: choices\n::: choice\nmean(age)\n:::\n\n::: {.choice .correct-choice}\nmean(mouse_facts\\$age)\n:::\n\n::: choice\naverage(age)\n:::\n\n::: choice\naverage(mouse_facts\\$age)\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n1\\. The vector `(1, 2, 3, 4)` is not a valid vector: you need to use the `c()` function to create a vector in R. The exception is the colon `:` notation, which creates a sequence of numbers.\n\n2\\. The result of running `c(1, 2, 3) * 2` would be `c(2, 4, 6)`. This is because R is a vectorised language, so the `*` operator multiplies each element of the vector by 2.\n\n3\\. The difference between a matrix and a data frame is that a matrix has all elements of the same type (could be character, logical or numeric), while a data frame can have different types in each column.\n\n4\\. The code to create the data frame `favourite_fruits` gave an error because the columns are not the same length: 'fruit' and 'colour' have 3 elements, but 'price' has 2. You can't create a data frame with columns of different lengths. As for the other options, you can have character and numeric columns in the same data frame, the column names don't need to be in quotation marks (although the code will work if they are), and the `tibble()` function is an alternative to `data.frame()` but either is fine.\n\n5\\. Using the `view()` function is not a way to view the contents of a data frame in R. The correct function is `View()` (with a capital 'V'). All the other options are valid ways to view the contents of a data frame.\n\n6\\. To calculate the average age of the mice, you would use `mean(mouse_facts$age)`. This is because the `age` column is part of the `mouse_facts` data frame, so you need to use the `$` symbol to access it, and the function for calculating the average in R is `mean()`.\n\n</details>\n\n:::\n\n## Reading in data {#sec-readingin}\n\nSo far, we've explored the basics of R by creating our own data, or using built-in data objects like `letters` or `iris`. However, in real life analyses, we almost always need to read in data from files on our computers.\n\nIn this section we will use the file named `mousezempic_dosage_data.csv`, which you can find in the 'data' folder of the R project provided with this course.\n\n### Paths {#sec-paths}\n\nPaths tell R where to find the file you want to read in. They are strings of characters that first include the directory or series of directories in which a file is located, followed by the name of the file itself. For example, the path to a file called `my_data.csv` in a folder called `data` would be `data/my_data.csv`.\n\nIn this course, because we are all working out of the same R project (where the data files are all named the same and stored in a sub-folder called 'data'), we can all use the same paths. However, if you're interested in learning more about paths, check out the further reading section of this book (specifically @sec-fr-paths) or [codeacademy has a nice article on them](https://www.codecademy.com/resources/docs/general/file-paths).\n\nOne other thing that can make paths easier is to use RStudio's file explorer panel to help you. First, open it by clicking on the 'Files' tab in the bottom right panel of RStudio:\n\n![The file explorer panel in RStudio](images/S01F21_file_explorer.png){width=\"900\"}\n\nBy default, it will put you in your project directory. If you have data files in a different directory, you can navigate to that directory by clicking on the folders. Here, I have navigated to a folder called 'data', which is inside the 'R_course' folder. Once you're in the right place, to get the path for that folder, click on `More > Copy Folder Path to Clipboard`:\n\n![Copying the folder path to the clipboard](images/S01F22_copy_folder_path.png){width=\"800\"}\n\nThis will copy the path to the folder to your clipboard, which you can then paste into your R script. Then, you just need to add a `/` followed by the name of the file to the end of the path.\n\nFor example, the path to the folder in the above image is `~/Desktop/R_course/data`, so the path to the `mousezempic_dosage_data.csv` file is `~/Desktop/R_course/data/mousezempic_dosage_data.csv`.\n\n### Reading data with functions {#sec-readinFunctions}\n\nNow that we know how to find our data, we can read it in. We'll do this using a handy package called `readr`, that is part of the `tidyverse`.\n\n::: {.callout-note title=\"Packages in R\"}\nPackages are collections of functions that other people have written to help us do specific tasks, beyond what is built-in to R itself. The [tidyverse](https://www.tidyverse.org/) is a collection of packages that help to streamline data analysis in R. To use the tidyverse, we first need to install it. This is done using the `install.packages()` function, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install the tidyverse package\n# only do this once\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nWe only need to install a package once, but you must load it each time you open R. This is done using the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the tidyverse package\n# do this every time you open R\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\nYou'll see some output from the `tidyverse` package when you load it, which is just telling you that some of the tidyverse functions have the same name as other functions in R.\n\nIf you forget to load a package, R will give you an error when you try to use that package's functions, so it's usually a good idea to load all the packages you'll need at the start of your script to prevent you forgetting to load them the next time you open R. We'll do this at the start of each session in this course.\n:::\n\nTo read in our data, we'll use the `read_delim()` function from the `readr` package. This function takes in the path to the file you want to read in (in quotation marks `\"\"`, as this is a character string) and returns as output a tibble (this is basically the same as a data frame).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\"data/mousezempic_dosage_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 344 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): mouse_strain, cage_number, replicate, sex\ndbl (5): weight_lost_g, drug_dose_g, tail_length_mm, initial_weight_g, id_num\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 9\n   mouse_strain cage_number weight_lost_g replicate sex    drug_dose_g\n   <chr>        <chr>               <dbl> <chr>     <chr>        <dbl>\n 1 CD-1         1A                   3.75 rep1      male       0.00181\n 2 CD-1         1A                   3.8  rep1      female     0.00186\n 3 CD-1         1A                   3.25 rep1      female     0.00195\n 4 CD-1         1A                  NA    rep1      <NA>      NA      \n 5 CD-1         1A                   3.45 rep1      female     0.00193\n 6 CD-1         1A                   3.65 rep1      male       0.0019 \n 7 CD-1         1A                   3.62 rep1      female     0.00181\n 8 CD-1         1A                   4.68 rep1      male       0.00195\n 9 CD-1         1A                   3.48 rep1      <NA>       0.00193\n10 CD-1         1A                   4.25 rep1      <NA>       0.0019 \n# ℹ 334 more rows\n# ℹ 3 more variables: tail_length_mm <dbl>, initial_weight_g <dbl>,\n#   id_num <dbl>\n```\n\n\n:::\n:::\n\n\n::: {.callout-note title=\"Delimiters\"}\nThe 'delim' in 'read_delim' stands for delimiter, and refers to the character used to separates columns of the data.\n\nThe most common types of delimiter are comma-separated values (.csv files) and tab-separated values (.tsv files). Here's an example of what they look like:\n\n``` {filename=\"example.csv\"}\nName, Age\nAndy, 10\nBob, 8\n```\n\n\\\n\n``` {filename=\"example.tsv\"}\nName  Age\nAndy  10\nBob   8\n```\n\nBy default `read_delim()` will guess your delimiter, so it's easiest to use that to read files, no matter their format. However, if you read other people's code, you might also encounter the `read_tsv()` and `read_csv()` functions which are specifically for reading in tab-separated and comma-separated files, respectively. It's up to you which you use, just make sure to get the delimiter right! If you try to read in a file with the wrong delimiter, it'll look like a mess.\n\n<details>\n\n<summary>What happens if we use the wrong delimiter?</summary>\n\nAs an example, let's try reading in our comma-separated file with `read_tsv()`, which is specifically for tab-separated files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_tsv(\"data/mousezempic_dosage_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 344 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): mouse_strain,cage_number,weight_lost_g,replicate,sex,drug_dose_g,ta...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 1\n   mouse_strain,cage_number,weight_lost_g,replicate,sex,drug_dose_g,tail_lengt…¹\n   <chr>                                                                        \n 1 CD-1,1A,3.75,rep1,male,0.00181,18.7,39.1,1                                   \n 2 CD-1,1A,3.8,rep1,female,0.0018600000000000001,17.4,39.5,2                    \n 3 CD-1,1A,3.25,rep1,female,0.00195,18,40.3,3                                   \n 4 CD-1,1A,NA,rep1,NA,NA,NA,NA,4                                                \n 5 CD-1,1A,3.45,rep1,female,0.00192999999999999,19.3,36.7,5                     \n 6 CD-1,1A,3.65,rep1,male,0.0019,20.6,39.3,6                                    \n 7 CD-1,1A,3.625,rep1,female,0.00181,17.8,38.9,7                                \n 8 CD-1,1A,4.675,rep1,male,0.00195,19.6,39.2,8                                  \n 9 CD-1,1A,3.475,rep1,NA,0.00192999999999999,18.1,34.1,9                        \n10 CD-1,1A,4.25,rep1,NA,0.0019,20.2,42,10                                       \n# ℹ 334 more rows\n# ℹ abbreviated name:\n#   ¹​`mouse_strain,cage_number,weight_lost_g,replicate,sex,drug_dose_g,tail_length_mm,initial_weight_g,id_num`\n```\n\n\n:::\n:::\n\n\nWe can see that the data is all in one column, which is not what we want!\n\n</details>\n:::\n\nDepending on where you have put your data, your path to the `mousezempic_dosage_data.csv` file may be different. You should be able to find the path by following the instructions in the 'Paths' section above.\n\n::: {.callout-note title=\"Using RStudio to autocomplete paths\"}\nAnother conveninent way to get the path of your file (so long as you are working within an R project) is to use a feature called 'tab completion'. Within R projects, R can discover any files sitting in, or downstream of the project directory. So, assuming our `mousezempic_dosage_data.csv` file is located within a folder called 'data', if we start typing `read_delim(\"data/mouse` then press {{< kbd Tab >}}, R will auto-complete the full file path and close the quotes and bracket for us!\n:::\n\nNow, let's take a look at the output of `read_delim()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\"data/mousezempic_dosage_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 344 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): mouse_strain, cage_number, replicate, sex\ndbl (5): weight_lost_g, drug_dose_g, tail_length_mm, initial_weight_g, id_num\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 9\n   mouse_strain cage_number weight_lost_g replicate sex    drug_dose_g\n   <chr>        <chr>               <dbl> <chr>     <chr>        <dbl>\n 1 CD-1         1A                   3.75 rep1      male       0.00181\n 2 CD-1         1A                   3.8  rep1      female     0.00186\n 3 CD-1         1A                   3.25 rep1      female     0.00195\n 4 CD-1         1A                  NA    rep1      <NA>      NA      \n 5 CD-1         1A                   3.45 rep1      female     0.00193\n 6 CD-1         1A                   3.65 rep1      male       0.0019 \n 7 CD-1         1A                   3.62 rep1      female     0.00181\n 8 CD-1         1A                   4.68 rep1      male       0.00195\n 9 CD-1         1A                   3.48 rep1      <NA>       0.00193\n10 CD-1         1A                   4.25 rep1      <NA>       0.0019 \n# ℹ 334 more rows\n# ℹ 3 more variables: tail_length_mm <dbl>, initial_weight_g <dbl>,\n#   id_num <dbl>\n```\n\n\n:::\n:::\n\n\nThe first line tells us how many rows and columns are in the data. Then, the `Column specification` section tells you:\n\n-   What delimiter was used to separate values.\n\n-   Which columns belong to each type. `read_delim()` is quite clever and will guess this for us, but it's useful to check and make sure it's correct.\n\nThen, the data will be printed out as a tibble.\n\n::: {.callout-note title=\"Tibbles and data frames\"}\nTibbles are a more modern version of data frames introduced in the [tidyverse](https://www.tidyverse.org/). They are very similar to data frames, but have some additional features like printing more nicely in the console.\n\nLet's use `iris` to highlight the advantages of tibbles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# need to load the tidyverse package to use tibbles\n# see below for more information on loading packages\nlibrary(tidyverse)\n```\n:::\n\n\nWhen we print a data frame, it shows every single row and column, which can be overwhelming if the data frame is large:\n\n<details>\n\n<summary>Click here to print `iris` as a data frame!</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print iris\niris\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n```\n\n\n:::\n:::\n\n\n</details>\n\nBut when we print a tibble, only a small preview is shown, which is much easier to read:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print iris as a tibble\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n```\n\n\n:::\n:::\n\n\nIt also tells us the number of rows (150) and columns (5) in the data, as well as the types of each column (`<dbl>` is short for `double`, which is a type of numeric data).\n\nFor the purpose of this course, we can treat tibbles and data frames as the same thing. However, if you're interested in learning more about tibbles, you can read about them [here](https://r4ds.had.co.nz/tibbles.html#tibbles-vs.-data.frame).\n:::\n\nNo matter which function you use to read in your data, R simply prints the values out in the console. To actually work with data in R, we need assign our data frame to a variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndosage <- read_delim(\"data/mousezempic_dosage_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 344 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): mouse_strain, cage_number, replicate, sex\ndbl (5): weight_lost_g, drug_dose_g, tail_length_mm, initial_weight_g, id_num\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### Reading data through RStudio's graphical interface {#sec-readinGUI}\n\nYou can also read in data through RStudio's graphical interface. This is a good way to get the code to read in data if you're not sure how to do it yourself.\n\nTo do this, click on the 'Import Dataset' button in the environment panel (for our data, we will use the 'from Text (readr)' option):\n\n![The import dataset button in the environment panel](images/S01F23_import_dataset_button.png){width=\"800\"}\n\nThis will open a window where you can select the file you want to read in, like so:\n\n![The import dataset window in RStudio](images/S01F24_import_dataset_window.png){width=\"800\"}\n\nR will then generate the code to read in the data for you, and you can use the preview to check that it has worked ok:\n\n![RStudio will then read in the data, and give you the code that it used](images/S01F25_import_dataset_code.png){width=\"800\"}\n\nYou can then copy this code and paste it into your script. This step is really important because not only does it helps you to learn how to read in data yourself, **it keeps a record in the script of how you read in the data so that you can reproduce your analysis later.**\n\n![Don't forget to paste the code into the script!!!](images/S01F26_paste_code.png){width=\"1000\"}\n\n::: {.callout-important title=\"Practice exercises\"}\nTry these practice questions to test your understanding\n\n::: question\n1\\. What is a path?\n\n::: choices\n::: choice\nA type of data in R\n:::\n\n::: choice\nThe data you want to analyse\n:::\n\n::: {.choice .correct-choice}\nA string of characters that tells R where to find a file\n:::\n\n::: choice\nA function in R\n:::\n:::\n:::\n\n::: question\n2\\. What is NOT a way to read in a file called `my_data.tsv` in R?\n\n::: choices\n::: choice\nUsing the `read_delim()` function\n:::\n\n::: choice\nUsing the 'Import Dataset' button in RStudio\n:::\n\n::: choice\nUsing the `read_tsv()` function\n:::\n\n::: {.choice .correct-choice}\nUsing the `read_csv()` function\n:::\n:::\n:::\n\n::: question\n3\\. What do we need to do before we can use functions from `readr` or any other R package?\n\n::: choices\n::: choice\nInstall it\n:::\n\n::: {.choice .correct-choice}\nInstall it, then load it into our R session using the `library()` function\n:::\n\n::: choice\nDownload it\n:::\n\n::: choice\nLook at the help page for the functions we want to use\n:::\n:::\n:::\n\n<details>\n\n<summary>Solutions</summary>\n\n1\\. A path is a string of characters that tells R where to find a file. Note that it isn't the data itself, but rather the location of the data.\n\n2\\. The `read_csv()` function is not a way to read in a file called `my_data.tsv`, because it is specifically for reading in comma-separated files, so it would not work for a tab-separated file like `my_data.tsv`.\n\n3\\. Before we can use functions from `readr` or any other R package, we need to install it, then load it into our R session using the `library()` function. Otherwise we will get an error message when we try to use the functions.\n\n</details>\n:::\n\n## Summary\n\nHere's what we've learnt in this session:\n\n-   How to use an R project (to keep our files organised) and how to write and run code from an R script (so that the code is saved as a record of our work)\n\n-   The operators for basic maths (`*`, `/`, `+` and `-`) and comparisons (`==`, `<`, `<=` and `!`)\n\n-   How to use functions and specify their arguments, as well as how to get help\n\n-   How to assign variables using the `<-` operator, and how to name them appropriately\n\n-   The three basic atomic data types in R (character, numeric and logical)\n\n-   Three different data structures in R (vectors, matrices and data frames/tibbles)\n\n-   How to find file paths using RStudio\n\n-   How to load the `readr` package and use it to read in files\n\nTry the practice questions below to test your understanding!\n\n### Practice questions\n\n1.  What would be the result of evaluating the following expressions? You don't need to know these off the top of your head, use R to help! (Hint: some expressions might give an error. Try to think about why)\n\n    a.  `5 + 10`\n    b.  `100 >= (5 + 2) ^ 2`\n    c.  `!(100 > 1)`\n    d.  `500 = 5 * 100`\n    e.  `2fast <- \"zoom\"`\n    f.  `round(428.195721, 2)`\n    g.  `?t.test`\n    h.  `class(\"banana\")`\n    i.  `class(as.numeric(\"500\"))`\n    j.  `\"1\" + \"10\"`\n    k.  `length(1:100)`\n    l.  `sum(c(1, 2, 3, 4))`\n    m.  `head(iris)`\n    n.  `mean(iris$Sepal.Width)`\n    o.  `read_tsv(\"gene_counts.csv\")`\n\n2.  Write some R code to complete the right-hand side of this comparison: `as.numeric(\"100\") * 3 ==`\n\n3.  I wrote the following R code, and got an error. How can I fix it?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # the number of frogs I counted\n    Frog_counts <- c(11, 2, 4, 9, 10)\n    \n    # convert to a proportion: divide by the sum\n    frog_counts / sum(Frog_counts)\n    ```\n    \n    ::: {.cell-output .cell-output-error}\n    \n    ```\n    Error: object 'frog_counts' not found\n    ```\n    \n    \n    :::\n    :::\n\n\n4.  Load the `iris` data frame into your R session using `data(iris)`. What is the median petal length? Show the code you used to calculate this.\n\n5.  Imagine I have a file called `mouse_survival.tsv` located in a folder with the path `~/Downloads/experimental_data/latest`. Write a line of R code to read in this file and assign it to a variable called `mouse_survival`\n\n<details>\n\n<summary>Solutions</summary>\n\n1. The results of evaluating the expressions are:\n    a.  `5 + 10` is `15`\n    b.  `100 >= (5 + 2) ^ 2` is `TRUE`\n    c.  `!(100 > 1)` is `FALSE` (although 100 is greater than 1, the `!` operator negates this)\n    d.  `500 = 5 * 100` gives an error because we need two equals signs `==` to check for equality in R. Actually this code is trying to assign the value of `5 * 100` to the variable `500`, which is not allowed, because variable names can't start with a number.\n    e.  `2fast <- \"zoom\"` gives an error because variable names can't start with a number\n    f.  `round(428.195721, 2)` is `428.2`\n    g.  `?t.test` opens the help page for the `t.test()` function\n    h.  `class(\"banana\")` is `\"character\"`\n    i.  `class(as.numeric(\"500\"))` is `\"numeric\"`\n    j.  `\"1\" + \"10\"` gives an error because you can't add two character strings together\n    k.  `length(1:100)` is `100`\n    l.  `sum(c(1, 2, 3, 4))` is `10`\n    m.  `head(iris)` shows the first 6 rows of the `iris` data frame\n    n.  `mean(iris$Sepal.Width)` is the average of the `Sepal.Width` column in the `iris` data frame\n    o.  `read_tsv(\"gene_counts.csv\")` will try to read in `gene_counts.csv` as if it were tab-separated, which will result in all the data being in one column\n\n2. The right-hand side of the comparison `as.numeric(\"100\") * 3 ==` can be anything that results in 300 e.g. `300` or `299 + 1`, for example\n\n3. The error in the code is because the variable name `Frog_counts` is not the same as `frog_counts`. R is case-sensitive, so it thinks you are trying to divide a variable that doesn't exist. To fix this, make sure all your variables have the same case (lowercase is better!):\n\n::: {.cell}\n\n```{.r .cell-code}\n    # the number of frogs I counted\n    frog_counts <- c(11, 2, 4, 9, 10)\n\n    # convert to a proportion: divide by the sum\n    frog_counts / sum(frog_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30555556 0.05555556 0.11111111 0.25000000 0.27777778\n```\n\n\n:::\n:::\n\n4. To calculate the median petal length in the `iris` data frame, you can use `median(iris$Petal.Length)`\n\n5. To read in the `mouse_survival.tsv` file and assign it to a variable called `mouse_survival`, you could use `red_delim()`: `mouse_survival <- read_delim(\"~/Downloads/experimental_data/latest/mouse_survival.tsv\")` or `read_tsv()`: `mouse_survival <- read_tsv(\"~/Downloads/experimental_data/latest/mouse_survival.tsv\")`.\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}